<?xml version="1.0"?>
<!-- ANT Build file -->
<project name="Win32-CommandLine" default="-copy" xmlns:ac="antlib:net.sf.antcontrib">

<!--<target name="*" depends="-copy"/> : NANT ONLY --><!-- COPY if no target recognized -->

<property name="build.main.dir" location="."/>

<property name="bin.dir" value="c:\users\public\documents\@bin"/>

<target name="-copy" depends="-init.macros">
	<ant antfile=".build.xml" dir=".." inheritAll="false"/>

	<property name="hg.source.dir" value="."/>
	<filtermapper id="hg.source.mapper">
		<replaceregex pattern="^\.hgrc$$" replace="hgrc" flags="i"/>
	</filtermapper>
	<filterset id="hg.source.filter">
		<filter token="build.main.dir" value="${build.main.dir}"/>
	</filterset>
	<patternset id="hg.source.patternset">
		<include name=".hgrc" />
		<include name=".morefilters.py" />
		<include name=".updatestate.py" />
	</patternset>
	<copyWRO source.dir="${hg.source.dir}" source.defaultexcludes="false" source.patternset.refid="hg.source.patternset" destination.dir=".hg" filename.mapper.refid="hg.source.mapper" copy.filter.refid="hg.source.filter" failonerror="true"/>

	<property name="bat.source.dir" value="..\..\bat\advanced"/>
	<patternset id="bat.source.patternset">
		<include name="so.bat" />
	</patternset>
	<copyWRO source.dir="${bat.source.dir}" source.defaultexcludes="false" source.patternset.refid="bat.source.patternset" destination.dir="extras" failonerror="true"/>

	<property name="eg.source.dir" value="eg"/>
	<patternset id="eg.source.patternset">
		<include name="to.bat" />
	</patternset>
	<copyWRO source.dir="${eg.source.dir}" source.defaultexcludes="false" source.patternset.refid="eg.source.patternset" destination.dir="${bin.dir}"/>

	<property name="extras.source.dir" value="extras"/>
	<patternset id="extras.source.patternset">
		<include name="dosify.bat" />
		<include name="so.bat" />
		<include name="quote.bat" />
		<include name="which.pl" />
	</patternset>
	<copyWRO source.dir="${extras.source.dir}" source.defaultexcludes="false" source.patternset.refid="extras.source.patternset" destination.dir="${bin.dir}"/>
</target>

<!-- BUILD.PL targets -->
<target name="build" depends="-copy"/>
<target name="clean"/>
<target name="code" depends="-copy"/>
<target name="config_data" depends="-copy"/>
<target name="diff" depends="-copy"/>
<target name="dist" depends="-copy"/>
<target name="distall" depends="-copy"/>
<target name="distcheck" depends="-copy"/>
<target name="distclean" depends="-copy"/>
<target name="distdir" depends="-copy"/>
<target name="distmeta" depends="-copy"/>
<target name="distpar" depends="-copy"/>
<target name="distppm" depends="-copy"/>
<target name="distsign" depends="-copy"/>
<target name="disttest" depends="-copy"/>
<target name="docs" depends="-copy"/>
<target name="fakeinstall" depends="-copy"/>
<target name="help" depends="-copy"/>
<target name="html" depends="-copy"/>
<target name="install" depends="-copy"/>
<target name="manifest" depends="-copy"/>
<target name="manpages" depends="-copy"/>
<target name="pardist" depends="-copy"/>
<target name="ppd" depends="-copy"/>
<target name="ppmdist" depends="-copy"/>
<target name="prereq_report" depends="-copy"/>
<target name="pure_install" depends="-copy"/>
<target name="realclean"/>
<target name="retest" depends="-copy"/>
<target name="sign" depends="-copy"/>
<target name="skipcheck" depends="-copy"/>
<target name="test" depends="-copy"/>
<target name="testaction" depends="-copy"/>
<target name="testall" depends="-copy"/>
<target name="testcover" depends="-copy"/>
<target name="testdb" depends="-copy"/>
<target name="testpod" depends="-copy"/>
<target name="testpodcoverage" depends="-copy"/>
<target name="versioninstall" depends="-copy"/>

<!-- MACROS -->
<target name="-init.macros">
	<macrodef name="copyWRO">
	<attribute name="source.dir"/>
	<attribute name="source.defaultexcludes" default="true"/>
	<attribute name="source.patternset.refid"/>
	<attribute name="destination.dir"/>
	<attribute name="destination.flatten" default="false"/>
	<attribute name="filename.mapper.refid" default=""/>
	<attribute name="copy.filter.refid" default=""/>
	<attribute name="overwrite" default="false"/>
	<attribute name="failonerror" default="false"/>
	<attribute name="warn.dest.newer" default="true"/>
	<attribute name="set.dest.readonly" default="true"/>
	<sequential>
	<property name="b.dir" location="."/>
	<property name="s.dir" location="@{source.dir}"/>
	<property name="d.dir" location="@{destination.dir}"/>
	<ac:for param="s.fname">
		<fileset defaultexcludes="@{source.defaultexcludes}" dir="${s.dir}">
			<patternset refid="@{source.patternset.refid}"/>
		</fileset>
		<sequential>
			<!--echo message="s.dir = &quot;${s.dir}&quot;"/-->
			<!--echo message="d.dir = &quot;${d.dir}&quot;"/-->
			<property name="s.fname" value="@{s.fname}"/>
			<!--echo message="s.fname = &quot;${s.fname}&quot;"/-->
			<ac:if><equals arg1="@{filename.mapper.refid}" arg2=""/>
				<ac:then>
					<ac:if><istrue value="@{destination.flatten}"/>
						<ac:then>
							<pathconvert property="d.fname">
								<path><pathelement location="${s.fname}"/></path>
								<chainedmapper>
									<flattenmapper/>
									<globmapper from="*" to="${d.dir}/*"/>
								</chainedmapper>
							</pathconvert>
						</ac:then>
						<ac:else>
							<pathconvert property="d.fname">
								<path><pathelement location="${s.fname}"/></path>
								<map from="${s.dir}" to="${d.dir}"/>
							</pathconvert>
						</ac:else>
					</ac:if>
				</ac:then>
				<ac:else>
					<pathconvert property="d.fname">
						<path><pathelement location="${s.fname}"/></path>
						<chainedmapper>
							<globmapper from="${s.dir}${file.separator}*" to="*"/>
							<mapper refid="@{filename.mapper.refid}"/>
							<globmapper from="*" to="${d.dir}/*"/>
						</chainedmapper>
					</pathconvert>
				</ac:else>
			</ac:if>
			<!--echo message="d.fname = &quot;${d.fname}&quot;"/-->
			<condition property="d.isNewer" else="FALSE">
				<and>
					<available file="${d.fname}"/>
					<not>
					<uptodate srcfile="${d.fname}" targetfile="${s.fname}"/>
					</not>
				</and>
			</condition>
			<!--echo message="d.isNewer = ${d.isNewer}"/-->
			<condition property="DO.warn">
				<and>
					<istrue value="${d.isNewer}"/>
					<istrue value="@{warn.dest.newer}"/>
				</and>
			</condition>
			<!--echo message="DO.warn = ${DO.warn}"/-->
			<ac:if><istrue value="${DO.warn}"/>
				<ac:then>
					<pathconvert property="dir">
						<path><pathelement location="${d.dir}"/></path>
						<!--map from="${s.dir}/" to=""/--><!-- relative to source.dir -->
						<mapper type="glob" from="${b.dir}${file.separator}" to=""/><!-- relative to main build directory -->
					</pathconvert>
					<pathconvert property="fname">
						<path><pathelement location="${d.fname}"/></path>
						<mapper type="glob" from="${d.dir}${file.separator}" to=""/>
					</pathconvert>
					<ac:if><not><istrue value="@{failonerror}"/></not>
						<ac:then>
							<condition property="overwrite.text" value="OVERWRITING" else="NOT OVERWRITTEN"><istrue value="@{overwrite}"/></condition>
							<echo level="warning" message="WARNING: In directory '${d.dir}', '${fname}' is NEWER than the SOURCE file (from '${s.dir}'; ${overwrite.text})."/>
							<ac:var name="overwrite.text" unset="true"/>
						</ac:then>
						<ac:else>
							<fail message="ERROR: In directory '${d.dir}', '${fname}' is NEWER than the SOURCE file (from '${s.dir}'; COPY FAILED)."/>
						</ac:else>
					</ac:if>
					<ac:var name="dir" unset="true"/>
					<ac:var name="fname" unset="true"/>
				</ac:then>
			</ac:if>
			<condition property="DO.copy">
				<or>
					<not>
					<uptodate srcfile="${s.fname}" targetfile="${d.fname}"/>
					</not>
					<and>
						<istrue value="${d.isNewer}"/>
						<istrue value="@{overwrite}"/>
					</and>
				</or>
			</condition>
			<ac:if><istrue value="${DO.copy}"/>
				<ac:then>
					<!--echo message="TASK: copy file &quot;${s.fname}&quot; tofile=&quot;${d.fname}&quot;"/-->
					<ac:if><not><isreference refid="@{copy.filter.refid}"/></not>
						<ac:then>
							<copy file="${s.fname}" tofile="${d.fname}" preservelastmodified="true" overwrite="@{overwrite}"/>
						</ac:then>
						<ac:else>
							<copy file="${s.fname}" tofile="${d.fname}" preservelastmodified="true" overwrite="@{overwrite}">
								<filterset refid="@{copy.filter.refid}"/>
							</copy>
						</ac:else>
					</ac:if>
				</ac:then>
			</ac:if>
			<ac:if><istrue value="@{set.dest.readonly}"/>
				<ac:then>
					<!--echo message="TASK: attrib readonly=true file=&quot;${d.fname}&quot;"/-->
					<attrib readonly="true" file="${d.fname}"/>
				</ac:then>
			</ac:if>
			<ac:var name="DO.warn" unset="true"/>
			<ac:var name="DO.copy" unset="true"/>
			<ac:var name="s.fname" unset="true"/>
			<ac:var name="d.fname" unset="true"/>
			<ac:var name="d.isNewer" unset="true"/>
		</sequential>
	</ac:for>
	<ac:var name="b.dir" unset="true"/>
	<ac:var name="s.dir" unset="true"/>
	<ac:var name="d.dir" unset="true"/>
	</sequential>
	</macrodef>
</target>

</project>
